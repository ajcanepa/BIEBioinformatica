# 1. Contar nucleótidos
adn = "AGCCTTT"

def contar_nucleotidos(adn):
    n_A = 0
    n_C = 0
    n_G = 0
    n_T = 0
    
    for nucleotido in adn:
        if nucleotido == "A":
            n_A += 1
        elif nucleotido == "C":
            n_C += 1
        elif nucleotido == "G":
            n_G += 1
        elif nucleotido == "T":
            n_T += 1
    
    print('Cantidad de A: ', n_A)
    print('Cantidad de C: ', n_C)
    print('Cantidad de G: ', n_G)
    print('Cantidad de T: ', n_T)

    return n_A, n_C, n_G, n_T
  
contar_nucleotidos(adn)
  
# 2. Transcripción
adn = "GATGGAACTTGACTACGTAAATT"

def transcripcion(adn):
    arn = ""
    
    for nucleotido in adn:
        if nucleotido == "A":
            arn=arn+"A"
        elif nucleotido == "C":
            arn=arn+"C"
        elif nucleotido == "G":
            arn=arn+"G"
        elif nucleotido == "T":
            arn=arn+"U"
    return arn
  
print(adn)
print(transcripcion(adn))

# 2a. Cadena complementaria
adn = "AAAACCCGGT"

def complementaria(adn):
    cc = ""
    
    for nucleotido in adn:
        if nucleotido == "A":
            cc=cc+"T"
        elif nucleotido == "C":
            cc=cc+"G"
        elif nucleotido == "G":
            cc=cc+"C"
        elif nucleotido == "T":
            cc=cc+"A"
    return cc

print(adn)
print(complementaria(adn))


# 2b. Cadena complementaria inversa
adn = "AAAACCCGGT"

def complementaria_inversa(adn):
    cci = ""
    
    for nucleotido in adn:
        if nucleotido == "A":
            cci="T"+cci
        elif nucleotido == "C":
            cci="G"+cci
        elif nucleotido == "G":
            cci="C"+cci
        elif nucleotido == "T":
            cci="A"+cci
    return cci

print(adn)
print(complementaria_inversa(adn))


# 3. Traducción a proteína
adn = "ATGCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA"

arn = transcripcion(adn)

aminoacidos = { "UUU":"F", "UUC":"F", "UUA":"L", "UUG":"L",
                "UCU":"S", "UCC":"s", "UCA":"S", "UCG":"S",
                "UAU":"Y", "UAC":"Y", "UAA":"STOP", "UAG":"STOP",
                "UGU":"C", "UGC":"C", "UGA":"STOP", "UGG":"W",
                "CUU":"L", "CUC":"L", "CUA":"L", "CUG":"L",
                "CCU":"P", "CCC":"P", "CCA":"P", "CCG":"P",
                "CAU":"H", "CAC":"H", "CAA":"Q", "CAG":"Q",
                "CGU":"R", "CGC":"R", "CGA":"R", "CGG":"R",
                "AUU":"I", "AUC":"I", "AUA":"I", "AUG":"M",
                "ACU":"T", "ACC":"T", "ACA":"T", "ACG":"T",
                "AAU":"N", "AAC":"N", "AAA":"K", "AAG":"K",
                "AGU":"S", "AGC":"S", "AGA":"R", "AGG":"R",
                "GUU":"V", "GUC":"V", "GUA":"V", "GUG":"V",
                "GCU":"A", "GCC":"A", "GCA":"A", "GCG":"A",
                "GAU":"D", "GAC":"D", "GAA":"E", "GAG":"E",
                "GGU":"G", "GGC":"G", "GGA":"G", "GGG":"G",}

arn


def traduccion(arn):
    proteina = ""
    
    for i in range(0, len(arn), 3): 
            codon = arn[i:i + 3] 
            aminoacido = aminoacidos[codon] 
            if aminoacido == "STOP":
                break
            else:
                proteina += aminoacido
    return proteina

print(traduccion(arn))


# 4. Caso real
adn =  "ATGGGCATTCTGCCGAGCCCGGGCATGCCGGCGCTGCTGAGCCTGGTGAGCCTGCTGAGC \
        GTGCTGCTGATGGGCTGCGTGGCGGAAACCGGCACCCAGTGCGTGAACCTGACCACCCGC \
        ACCCAGCTGCCGCCGGCGTATACCAACAGCTTTACCCGCGGCGTGTATTATCCGGATAAA \
        GTGTTTCGCAGCAGCGTGCTGCATAGCACCCAGGATCTGTTTCTGCCGTTTTTTAGCAAC \
        GTGACCTGGTTTCATGCGATTCATGTGAGCGGCACCAACGGCACCAAACGCTTTGATAAC \
        CCGGTGCTGCCGTTTAACGATGGCGTGTATTTTGCGAGCACCGAAAAAAGCAACATTATT \
        CGCGGCTGGATTTTTGGCACCACCCTGGATAGCAAAACCCAGAGCCTGCTGATTGTGAAC \
        AACGCGACCAACGTGGTGATTAAAGTGTGCGAATTTCAGTTTTGCAACGATCCGTTTCTG \
        GGCGTGTATTATCATAAAAACAACAAAAGCTGGATGGAAAGCGAATTTCGCGTGTATAGC \
        AGCGCGAACAACTGCACCTTTGAATATGTGAGCCAGCCGTTTCTGATGGATCTGGAAGGC \
        AAACAGGGCAACTTTAAAAACCTGCGCGAATTTGTGTTTAAAAACATTGATGGCTATTTT \
        AAAATTTATAGCAAACATACCCCGATTAACCTGGTGCGCGATCTGCCGCAGGGCTTTAGC \
        GCGCTGGAACCGCTGGTGGATCTGCCGATTGGCATTAACATTACCCGCTTTCAGACCCTG \
        CTGGCGCTGCATCGCAGCTATCTGACCCCGGGCGATAGCAGCAGCGGCTGGACCGCGGGC \
        GCGGCGGCGTATTATGTGGGCTATCTGCAGCCGCGCACCTTTCTGCTGAAATATAACGAA \
        AACGGCACCATTACCGATGCGGTGGATTGCGCGCTGGATCCGCTGAGCGAAACCAAATGC \
        ACCCTGAAAAGCTTTACCGTGGAAAAAGGCATTTATCAGACCAGCAACTTTCGCGTGCAG \
        CCGACCGAAAGCATTGTGCGCTTTCCGAACATTACCAACCTGTGCCCGTTTGGCGAAGTG \
        TTTAACGCGACCCGCTTTGCGAGCGTGTATGCGTGGAACCGCAAACGCATTAGCAACTGC \
        GTGGCGGATTATAGCGTGCTGTATAACAGCGCGAGCTTTAGCACCTTTAAATGCTATGGC \
        GTGAGCCCGACCAAACTGAACGATCTGTGCTTTACCAACGTGTATGCGGATAGCTTTGTG \
        ATTCGCGGCGATGAAGTGCGCCAGATTGCGCCGGGCCAGACCGGCAAAATTGCGGATTAT \
        AACTATAAACTGCCGGATGATTTTACCGGCTGCGTGATTGCGTGGAACAGCAACAACCTG \
        GATAGCAAAGTGGGCGGCAACTATAACTATCTGTATCGCCTGTTTCGCAAAAGCAACCTG \
        AAACCGTTTGAACGCGATATTAGCACCGAAATTTATCAGGCGGGCAGCACCCCGTGCAAC \
        GGCGTGGAAGGCTTTAACTGCTATTTTCCGCTGCAGAGCTATGGCTTTCAGCCGACCAAC \
        GGCGTGGGCTATCAGCCGTATCGCGTGGTGGTGCTGAGCTTTGAACTGCTGCATGCGCCG \
        GCGACCGTGTGCGGCCCGAAAAAAAGCACCAACCTGGTGAAAAACAAATGCGTGAACTTT \
        AACTTTAACGGCCTGACCGGCACCGGCGTGCTGACCGAAAGCAACAAAAAATTTCTGCCG \
        TTTCAGCAGTTTGGCCGCGATATTGCGGATACCACCGATGCGGTGCGCGATCCGCAGACC \
        CTGGAAATTCTGGATATTACCCCGTGCAGCTTTGGCGGCGTGAGCGTGATTACCCCGGGC \
        ACCAACACCAGCAACCAGGTGGCGGTGCTGTATCAGGATGTGAACTGCACCGAAGTGCCG \
        GTGGCGATTCATGCGGATCAGCTGACCCCGACCTGGCGCGTGTATAGCACCGGCAGCAAC \
        GTGTTTCAGACCCGCGCGGGCTGCCTGATTGGCGCGGAACATGTGAACAACAGCTATGAA \
        TGCGATATTCCGATTGGCGCGGGCATTTGCGCGAGCTATCAGACCCAGACCAACAGCCCG \
        AGCGGCGCGGGCAGCGTGGCGAGCCAGAGCATTATTGCGTATACCATGAGCCTGGGCGCG \
        GAAAACAGCGTGGCGTATAGCAACAACAGCATTGCGATTCCGACCAACTTTACCATTAGC \
        GTGACCACCGAAATTCTGCCGGTGAGCATGACCAAAACCAGCGTGGATTGCACCATGTAT \
        ATTTGCGGCGATAGCACCGAATGCAGCAACCTGCTGCTGCAGTATGGCAGCTTTTGCACC \
        CAGCTGAACCGCGCGCTGACCGGCATTGCGGTGGAACAGGATAAAAACACCCAGGAAGTG \
        TTTGCGCAGGTGAAACAGATTTATAAAACCCCGCCGATTAAAGATTTTGGCGGCTTTAAC \
        TTTAGCCAGATTCTGCCGGATCCGAGCAAACCGAGCAAACGCAGCTTTATTGAAGATCTG \
        CTGTTTAACAAAGTGACCCTGGCGGATGCGGGCTTTATTAAACAGTATGGCGATTGCCTG \
        GGCGATATTGCGGCGCGCGATCTGATTTGCGCGCAGAAATTTAACGGCCTGACCGTGCTG \
        CCGCCGCTGCTGACCGATGAAATGATTGCGCAGTATACCAGCGCGCTGCTGGCGGGCACC \
        ATTACCAGCGGCTGGACCTTTGGCGCGGGCGCGGCGCTGCAGATTCCGTTTGCGATGCAG \
        ATGGCGTATCGCTTTAACGGCATTGGCGTGACCCAGAACGTGCTGTATGAAAACCAGAAA \
        CTGATTGCGAACCAGTTTAACAGCGCGATTGGCAAAATTCAGGATAGCCTGAGCAGCACC \
        GCGAGCGCGCTGGGCAAACTGCAGGATGTGGTGAACCAGAACGCGCAGGCGCTGAACACC \
        CTGGTGAAACAGCTGAGCAGCAACTTTGGCGCGATTAGCAGCGTGCTGAACGATATTCTG \
        AGCCGCCTGGATCCGCCGGAAGCGGAAGTGCAGATTGATCGCCTGATTACCGGCCGCCTG \
        CAGAGCCTGCAGACCTATGTGACCCAGCAGCTGATTCGCGCGGCGGAAATTCGCGCGAGC \
        GCGAACCTGGCGGCGACCAAAATGAGCGAATGCGTGCTGGGCCAGAGCAAACGCGTGGAT \
        TTTTGCGGCAAAGGCTATCATCTGATGAGCTTTCCGCAGAGCGCGCCGCATGGCGTGGTG \
        TTTCTGCATGTGACCTATGTGCCGGCGCAGGAAAAAAACTTTACCACCGCGCCGGCGATT \
        TGCCATGATGGCAAAGCGCATTTTCCGCGCGAAGGCGTGTTTGTGAGCAACGGCACCCAT \
        TGGTTTGTGACCCAGCGCAACTTTTATGAACCGCAGATTATTACCACCGATAACACCTTT \
        GTGAGCGGCAACTGCGATGTGGTGATTGGCATTGTGAACAACACCGTGTATGATCCGCTG \
        CAGCCGGAACTGGATAGCTTTAAAGAAGAACTGGATAAATATTTTAAAAACCATACCAGC \
        CCGGATGTGGATCTGGGCGATATTAGCGGCATTAACGCGAGCGTGGTGAACATTCAGAAA \
        GAAATTGATCGCCTGAACGAAGTGGCGAAAAACCTGAACGAAAGCCTGATTGATCTGCAG \
        GAACTGGGCAAATATGAACAGTATATTAAAGGCAGCGGCCGCGAAAACCTGTATTTTCAG \
        GGCGGCGGCGGCAGCGGCTATATTCCGGAAGCGCCGCGCGATGGCCAGGCGTATGTGCGC \
        AAAGATGGCGAATGGGTGCTGCTGAGCACCTTTCTGGGCCATCATCATCATCATCATCAT \
        CAT"

arn = transcripcion(adn)

print(arn)

proteina = traduccion(arn)

print(proteina)

# !pip install biopython
!pip install biopython

!wget -O protein.pdb https://files.rcsb.org/download/6VXX.pdb


# Da error!
from google.colab import output

output.enable_custom_widget_manager()

from Bio.PDB import *
import nglview as nv
import ipywidgets

pdb_parser = PDBParser()
structure = pdb_parser.get_structure("SARS-CoV-2 Spike", "protein.pdb")
view = nv.show_biopython(structure)

view
